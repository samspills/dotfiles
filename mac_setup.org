* Mac Machine Config
:PROPERTIES:
:header-args: :mkdirp yes
:END:
This is the mac version of my manjaro config.
** Git Config
:PROPERTIES:
:ID:       22443b22-e1b4-4e8d-9228-4908aeeccad4
:END:
Set up my user name and email address for git.
#+begin_src yaml :tangle "~/.gitconfig"
[user]
  email = srpillsworth@gmail.com
  name = Sam Pillsworth
#+end_src
** Homebrew and Package Installation
:PROPERTIES:
:ID:       8b53258b-b348-4001-8782-971aac6402d7
:END:

Install homebrew first
#+begin_src shell
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+end_src

Everything to install can be listed in a ~Brewfile~
#+begin_src text :tangle "Brewfile"
tap "d12frosted/emacs-plus"
tap "homebrew/bundle"
tap "homebrew/cask"
tap "homebrew/cask-fonts"
tap "homebrew/core"
tap "homebrew/services"
tap "osx-cross/avr"
tap "px4/px4"
# Search tool like grep, but optimized for programmers
brew "ag"
# Spell checker with better logic than ispell
brew "aspell"
# Tool for generating GNU Standards-compliant Makefiles
brew "automake"
# GNU File, Shell, and Text utilities
brew "coreutils"
# Configurable talking characters in ASCII art
brew "cowsay"
# Message bus system, providing inter-application communication
brew "dbus"
# Banner-like program prints strings as ASCII art
brew "figlet"
# Command-line fuzzy finder written in Go
brew "fzf"
# GNU compiler collection
brew "gcc"
# Interpreted, interactive, object-oriented programming language
brew "python"
# Source code tag system
brew "global"
# GNU Pretty Good Privacy (PGP) package
brew "gnupg"
# Manage compile and link flags for libraries
brew "pkg-config"
# Generic library support script
brew "libtool"
# Graph visualization software from AT&T and Bell Labs
brew "graphviz"
# Improved top (interactive process viewer)
brew "htop"
# Tools and libraries to manipulate images in many formats
brew "imagemagick"
# Lightweight and flexible command-line JSON processor
brew "jq"
# International domain name library (IDNA2008, Punycode and TR46)
brew "libidn2"
# Draw UML diagrams
brew "plantuml"
# Show ps output as a tree
brew "pstree"
# Python bindings for v5 of Qt
brew "pyqt"
# Send macOS User Notifications from the command-line
brew "terminal-notifier"
# Code-search similar to ack
brew "the_silver_searcher"
# Internet file retriever
brew "wget"
# GNU Emacs text editor
brew "d12frosted/emacs-plus/emacs-plus"
# GNU compiler collection for AVR 8-bit and 32-bit Microcontrollers
brew "osx-cross/avr/avr-gcc"
# GNU Embedded Toolchain for ARM
brew "px4/px4/gcc-arm-none-eabi"
cask "font-iosevka"
#+end_src

I use a bash script to handle the installation and fetching of packages by
running ~brew bundle~ and also cloning git repositories.
#+begin_src shell :tangle "manjaro_setup.sh" :shebang "#!/usr/bin/zsh"
if [ ! -f ~/.antigen.zsh ]; then
    echo "fetching antigen"
    curl -L git.io/antigen > ~/.antigen.zsh
fi

if [ ! -d ~/dotfiles ]; then
    echo "fetching dotfiles repo"
    git clone git@github.com:samspills/dotfiles /home/sam/dotfiles
    ln -s /home/sam/dotfiles/dot-emacs/.spacemacs /home/sam/.spacemacs
fi

if [ ! -d ~/.emacs.d ]; then
    echo "fetching spacemacs fork"
    git clone git@github.com:samspills/spacemacs ~/.emacs.d
    ln -s /home/sam/dotfiles/dot-emacs/custom.el /home/sam/.emacs.d/custom.el
fi

if [ ! "$SHELL" = "$(which zsh)" ]; then
    chsh -s $(which zsh)
fi

brew bundle ~/Brewfile
#+end_src

*** fzf
I use [[https://github.com/junegunn/fzf][fzf]] for shell history + completion. Completion of file names, configured
ssh servers, environment variables, and probably a lot of other things can be
triggered with ~**~.
#+begin_src shell :results output
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
cd ~/.fzf/
./install
#+end_src
** Shell
*** zsh
**** Environment
:PROPERTIES:
:ID:       34b5f30b-cb5b-463d-89e8-e20aff13f736
:END:
 #+begin_src shell :tangle "~/.zshenv"
export PATH=/home/sam/bin:/home/sam/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH
 #+end_src
**** Antigen
:PROPERTIES:
:ID:       bfb63105-5c3b-4a20-99cb-571aa9a48f38
:END:
I use antigen + oh-my-zsh to manage my zsh config for the most part
#+begin_src  shell :tangle "~/.zshrc"
source ~/.antigen.zsh
ZSH_DISABLE_COMPFIX=true
antigen use oh-my-zsh

antigen bundle colored-man-pages
antigen bundle colorize
antigen bundle pip
antigen bundle python

antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-completions
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-history-substring-search
antigen bundle command-not-found
antigen bundle srijanshetty/zsh-pip-completion
antigen bundle gimbo/venv-lite.zsh

antigen theme denysdovhan/spaceship-prompt

antigen apply
#+end_src
**** Spaceship Prompt
:PROPERTIES:
:ID:       d1da4d6f-cfd0-4417-b39e-ca276339e1a0
:END:
I'm trying out the spaceship prompt but there are some things that I don't like
#+begin_src shell :tangle "~/.zshrc"
export SPACESHIP_CHAR_SYMBOL='\ufb0c '
export SPACESHIP_VI_MODE_SHOW=false
export SPACESHIP_VENV_SYMBOL='\ue606 '
export SPACESHIP_CONDA_SYMBOL='\ue606 '
export SPACESHIP_BATTERY_PREFIX='\ue315'
export SPACESHIP_BATTERY_THRESHOLD=30
export SPACESHIP_JOBS_SYMBOL='\ufab4'
#+end_src
**** Functions
:PROPERTIES:
:ID:       79e8b3d6-3631-4f98-8174-6d295e26c347
:END:
Here are all of my custom zsh functions. I also tend to use functions over
aliases.
#+begin_src shell :tangle "~/.zshrc"
function jql() { jq -C "." <$* | less; }
function cowfig() {figlet "$*" | cowsay -n}
function cpcowfig() {figlet "$*" | cowsay -n | pbcopy}
function agp() {ag --py $*}
function gitsync() {rsync -t $(git diff --name-only) --relative $1}
#+end_src

An extraction function I took from the bashrc in manjaro:
#+begin_src shell :tangle "~/.zshrc"
function ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
#+end_src

#+BEGIN_SRC shell :tangle "~/.zshrc"
function setup_venv() { pip install --user pytest flake8 pandas matplotlib isort importmagic epc}
#+END_SRC
**** Exports and aliases
:PROPERTIES:
:ID:       424bc62d-1633-4633-8e9b-82f47767e150
:END:
Here I export some values and set a few aliases
#+begin_src shell :tangle "~/.zshrc"
export GTAGSLABEL=pygments
export EDITOR='emacsclient -a vim -u -q'

alias ec='emacsclient -u -q'
alias l='ls -lhFu'
alias tmux="tmux -2 -u"
alias zshconfig="ec ~/.zshrc"
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
#+end_src
**** Terminal specific settings
:PROPERTIES:
:ID:       1d545107-9939-4d9a-8dc9-46d465e5afee
:END:
#+begin_src shell :tangle "~/.zshrc"
bindkey -v
KEYTIMEOUT=1

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

setopt CORRECT

# History options
HISTSIZE=10000000
SAVEHIST=10000000
setopt inc_append_history
setopt share_history
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
#+end_src

I also have some terminal settings explicitly for when the terminal is dumb.
This is the case when using emacs + tramp to work remotely. When remoting into a
machine via tramp, all of the zsh config can really slow it down and also the
prompt can cause problems (it's been a long time since I set this up and I don't
remember the exact issue I was having).
#+begin_src shell :tangle "~/.zshrc"
if [[ "$TERM" == "dumb" ]]
then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd
    unfunction preexec
    PS1='$ '
fi
#+end_src

I use ~fzf~ for history search/completion.
#+begin_src shell :tangle "~/.zshrc"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#+end_src

Finally, source the environment file
#+begin_src shell :tangle "~/.zshrc"
source ~/.zshenv
#+end_src
*** urxvt
:PROPERTIES:
:ID:       1aacc5fb-6982-414a-9551-74d960b4c2f6
:END:

Set the spacemacs colour scheme for URxvt.
#+begin_src shell :tangle "~/.Xresources"
! Base16 Spacemacs
! Scheme: Nasser Alshammari (https://github.com/nashamri/spacemacs-theme)

! URxvt*tintColor:                      color
! URxvt*fadeColor:                      color

URxvt*background:                     #1f2022
URxvt*foreground:                     #a3a3a3
URxvt*cursorColor:                    #a3a3a3

! URxvt*colorBD:                        color
! URxvt*colorIT:                        color
! URxvt*colorUL:                        color
! URxvt*colorRV:                        color
! URxvt*underlineColor:                 color
URxvt*scrollColor:                    #a3a3a3
! URxvt*troughColor:                    color
URxvt*highlightColor:                 #444155
URxvt*highlightTextColor:             #b8b8b8
! URxvt*cursorColor2:                   color
! URxvt*pointerColor:                   color
! URxvt*pointerColor2:                  color
! URxvt*borderColor:                    color
! URxvt*tab-bg:                         colour
! URxvt*tab-fg:                         colour
! URxvt*tabbar-bg:                      colour
! URxvt*tabbar-fg:                      colour

URxvt*color0:                         #1f2022
URxvt*color1:                         #f2241f
URxvt*color2:                         #67b11d
URxvt*color3:                         #b1951d
URxvt*color4:                         #4f97d7
URxvt*color5:                         #a31db1
URxvt*color6:                         #2d9574
URxvt*color7:                         #a3a3a3
URxvt*color8:                         #585858
URxvt*color9:                         #f2241f
URxvt*color10:                        #67b11d
URxvt*color11:                        #b1951d
URxvt*color12:                        #4f97d7
URxvt*color13:                        #a31db1
URxvt*color14:                        #2d9574
URxvt*color15:                        #f8f8f8

! 256 color space
URxvt*color16:                        #ffa500
URxvt*color17:                        #b03060
URxvt*color18:                        #282828
URxvt*color19:                        #444155
URxvt*color20:                        #b8b8b8
URxvt*color21:                        #e8e8e8

#+end_src

Some ~.Xresources~ configuration for urxvt, my terminal emulator of choice.

Set the default font to be Iosevka, with Symbola as a backup for any missing
glyphs. So far this has been a really great combination for me.
#+begin_src shell :tangle "~/.Xresources"
! -- URxvt Fonts -- !
URxvt.font:xft:Iosevka:pixelsize=16:style=regular
URxvt.boldFont:xft:Iosevka:pixelsize=16:style=bold
URxvt.italicFont:xft:Iosevka:pixelsize=16:style=italic
URxvt.bolditalicFont:xft:Iosevka:pixelsize=16:style=bold:style=italic
#+end_src

The ~URxvt*letterSpace~ setting helps with cases where some font glyphs are not
truly monospaced. This can be an issue when using something like font-awesome.
I'm not sure I need this since I'm using Symbola instead, but it's something to
keep in mind.
#+begin_src shell :tangle "~/.Xresources"
URxvt*letterSpace: 2
#+end_src

Finally just some straightforward terminal settings: allow bold fonts, turn off
the scrollbar, and switch the cursor to an underline.
#+begin_src shell :tangle "~/.Xresources"
URxvt*allow_bold: true
URxvt.scrollBar: false
URxvt*cursorUnderline: true
URxvt.depth: 32
#+end_src

Transparency
#+begin_src shell :tangle "~/.Xresources"
URxvt*inheritPixmap:            true
URxvt*transparent:              true
URxvt*shading:                  35
#+end_src

#+begin_src shell :tangle "~/.Xresources"
URxvt.perl-ext: default,url-select,matcher,clipboard,font-size
URxvt.keysym.M-u: perl:url-select:select_next
URxvt.url-select.launcher: /usr/bin/qutebrowser
URxvt.url-select.underline: true
URxvt.keysym.C-Up: perl:font-size:increase
URxvt.keysym.C-Down: perl:font-size:decrease
URxvt.keysym.C-S-Up: perl:font-size:incglobal
URxvt.keysym.C-S-Down: perl:font-size:decglobal
URxvt.keysym.C-c: perl:clipboard:copy
URxvt.keysym.C-v: perl:clipboard:paste
#+end_src
** applications
*** dropbox
:PROPERTIES:
:ID:       b300ee12-58af-4d7b-bf28-0d958085fddf
:END:
I use dropbox to sync my org files across all my devices.

First install the dropbox via the command line for the 64 bit linux arch.
#+begin_src shell
cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
#+end_src

Run ~dropboxd~ and login for the first sync to happen.
#+begin_src shell
~/.dropbox-dist/dropboxd
#+end_src

Add a command to the i3 config to start dropbox on a restart.
#+begin_src shell :tangle "~/.config/i3/config"
exec --no-startup-id ~/.dropbox-dist/dropboxd
#+end_src
*** org-protocol
:PROPERTIES:
:ID:       c8cd3185-fb80-421c-a89e-72f63080d040
:END:

Some setup is needed to get [[https://orgmode.org/worg/org-contrib/org-protocol.html#org4166fc4][org-protocol]] working nicely in linux. Org-protocol
can intercept calls from emacsclient to trigger custom actions. We need to tell
linux that org-protocol is an available protocol handler.

#+begin_src shell :tangle "~/.local/share/applications/org-protocol.desktop"
[Desktop Entry]
Name=org-protocol
Exec=/usr/bin/emacsclient -n %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+end_src

Update the desktop database:
#+begin_src shell :results output
sudo update-desktop-database /home/sam/.local/share/applications
#+end_src

#+RESULTS:

~Org-protocol-capture-html~ captures webpages to a nice org heading by converting
to pandoc first.

Download the org-protocol capture script (currently downloading from my own fork
until updated to python 3 section get merged in).
#+begin_src shell :results output
wget --output-document="/home/sam/.local/bin/org-protocol-capture-html.sh" https://raw.githubusercontent.com/samspills/org-protocol-capture-html/samspills/python2-3-compatible/org-protocol-capture-html.sh
chmod +x /home/sam/.local/bin/org-protocol-capture-html.sh
#+end_src

#+RESULTS:

Finally we need a way to trigger capture from qutebrowser. I am using a [[https://www.reddit.com/r/emacs/comments/9ze1ln/capture_orgmode_bookmarks_from_qutebrowser_with/ea98mm2][script I
found on reddit]].
#+begin_src shell :tangle "~/.config/qutebrowser/userscripts/org-capture" :shebang "#!/usr/bin/zsh"
readonly CAPTURE_SCRIPT=~/.local/bin/org-protocol-capture-html.sh

# if we start with hints, delete title and selected text and use capture
if [[ "$QUTE_MODE" = "hints" ]]; then
    QUTE_TITLE=""
    QUTE_SELECTED_TEXT=""
fi

# we try to pass as many information as we have
if [[ -n "$QUTE_SELECTED_TEXT" ]]; then
    $CAPTURE_SCRIPT --heading "${QUTE_TITLE}" --url "${QUTE_URL}" "${QUTE_SELECTED_TEXT}"

elif [[ -n "$QUTE_TITLE" ]]; then
    $CAPTURE_SCRIPT --heading "${QUTE_TITLE}" --readability --url "${QUTE_URL}"

elif [[ -n "$QUTE_URL" ]]; then
    $CAPTURE_SCRIPT --readability --url "${QUTE_URL}"

fi
#+end_src
*** qutebrowser
**** config
:PROPERTIES:
:header-args:python: :tangle "~/.config/qutebrowser/config.py"
:ID:       207ae7ed-bfe5-49c5-84ec-2675ca8f71c5
:END:

Mostly default configurations here. I changed the editor command, and the tab
bar and when it shows. Other than that, fonts and keybindings are in sub-headings.
#+begin_src python
# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# Enable JavaScript.
# Type: Bool
c.content.javascript.enabled = True

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['ec', '{file}', '-c', 'normal {line}G{column0}l']

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'left'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'switching'

# Width (in pixels or as percentage of the window) of the tab bar if
# it's vertical.
# Type: PercOrInt
c.tabs.width = '15%'

# Setup a second file to hold personal blocked hosts
# personal file is `blockedHosts`
c.content.host_blocking.lists.append(str(config.configdir) + "/blockedHosts")
#+end_src
***** fonts
:PROPERTIES:
:ID:       65bdee48-7d43-4c5c-8c61-3b4394f93c5d
:END:
#+begin_src python
c.fonts.monospace = "Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.completion.entry = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.completion.category = "bold 10pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.debug_console = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.downloads = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.hints = "bold 11px Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.keyhint = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.messages.error = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.messages.info = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.messages.warning = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.prompts = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.statusbar = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.tabs = "7pt Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.web.family.fixed = "Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.web.family.sans_serif = "Iosevka Nerd Font Complete Mono, FontAwesome"
c.fonts.web.family.serif = "Iosevka Nerd Font Complete Mono, FontAwesome"
#+end_src

***** keybindings
:PROPERTIES:
:ID:       a86c2456-6291-47ea-aa16-9a65b053a652
:END:
#+begin_src python
# Bindings for normal mode
config.bind('zp', 'open -t https://getpocket.com/edit?url={url}')
config.bind("zw", "spawn --userscript ~/.config/qutebrowser/userscripts/org-capture")


# Bindings for insert mode
config.bind('<ctrl+k>', 'spawn --userscript ~/.config/qutebrowser/userscripts/password_fill', mode='insert')
#+end_src

**** userscripts
:PROPERTIES:
:header-args:shell: :shebang "#!/usr/bin/zsh"
:END:
***** Password Fill
:PROPERTIES:
:ID:       0663d977-fadd-4740-9d73-369976e71a7c
:END:
I'm not sure if this is still necessary? Now that I've switching to a linux
setup, I have a global keybinding to bring up the password menu, and it will
also auto-type. Still, I'll keep this around just in case.

#+begin_src shell :tangle "~/.config/qutebrowser/userscripts/password_fill"
help() {
    blink=$'\e[1;31m' reset=$'\e[0m'
cat <<EOF
This script can only be used as a userscript for qutebrowser
2015, Thorsten Wißmann <edu _at_ thorsten-wissmann _dot_ de>
In case of questions or suggestions, do not hesitate to send me an E-Mail or to
directly ask me via IRC (nickname thorsten\`) in #qutebrowser on freenode.

  $blink!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!$reset
  WARNING: the passwords are stored in qutebrowser's
           debug log reachable via the url qute://log
  $blink!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!$reset

Usage: run as a userscript form qutebrowser, e.g.:
  spawn --userscript ~/.config/qutebrowser/password_fill

Pass backend: (see also passwordstore.org)
  This script expects pass to store the credentials of each page in an extra
  file, where the filename (or filepath) contains the domain of the respective
  page. The first line of the file must contain the password, the login name
  must be contained in a later line beginning with "user:", "login:", or
  "username:" (configurable by the user_pattern variable).

Behavior:
  It will try to find a username/password entry in the configured backend
  (currently only pass) for the current website and will load that pair of
  username and password to any form on the current page that has some password
  entry field. If multiple entries are found, a zenity menu is offered.

  If no entry is found, then it crops subdomains from the url if at least one
  entry is found in the backend. (In that case, it always shows a menu)

Configuration:
  This script loads the bash script ~/.config/qutebrowser/password_fill_rc (if
  it exists), so you can change any configuration variable and overwrite any
  function you like.

EOF
}

set -o errexit
set -o pipefail
shopt -s nocasematch # make regexp matching in bash case insensitive

if [ -z "$QUTE_FIFO" ] ; then
    help
    exit
fi

error() {
    local msg="$*"
    echo "message-error '${msg//\'/\\\'}'" >> "$QUTE_FIFO"
}
msg() {
    local msg="$*"
    echo "message-info '${msg//\'/\\\'}'" >> "$QUTE_FIFO"
}
die() {
    error "$*"
    exit 0
}

javascript_escape() {
    # print the first argument in an escaped way, such that it can safely
    # be used within javascripts double quotes
    sed "s,[\\\\'\"],\\\\&,g" <<< "$1"
}

# ======================================================= #
# CONFIGURATION
# ======================================================= #
# The configuration file is per default located in
# ~/.config/qutebrowser/password_fill_rc and is a bash script that is loaded
# later in the present script. So basically you can replace all of the
# following definitions and make them fit your needs.

# The following simplifies a URL to the domain (e.g. "wiki.qutebrowser.org")
# which is later used to search the correct entries in the password backend. If
# you e.g. don't want the "www." to be removed or if you want to distinguish
# between different paths on the same domain.

simplify_url() {
    simple_url="${1##*://}" # remove protocol specification
    simple_url="${simple_url%%\?*}" # remove GET parameters
    simple_url="${simple_url%%/*}" # remove directory path
    simple_url="${simple_url%:*}" # remove port
    simple_url="${simple_url##www.}" # remove www. subdomain
}

# no_entries_found() is called if the first query_entries() call did not find
# any matching entries. Multiple implementations are possible:
# The easiest behavior is to quit:
#no_entries_found() {
#    if [ 0 -eq "${#files[@]}" ] ; then
#        die "No entry found for »$simple_url«"
#    fi
#}
# But you could also fill the files array with all entries from your pass db
# if the first db query did not find anything
# no_entries_found() {
#     if [ 0 -eq "${#files[@]}" ] ; then
#         query_entries ""
#         if [ 0 -eq "${#files[@]}" ] ; then
#             die "No entry found for »$simple_url«"
#         fi
#     fi
# }

# Another behavior is to drop another level of subdomains until search hits
# are found:
no_entries_found() {
    while [ 0 -eq "${#files[@]}" ] && [ -n "$simple_url" ]; do
        shorter_simple_url=$(sed 's,^[^.]*\.,,' <<< "$simple_url")
        if [ "$shorter_simple_url" = "$simple_url" ] ; then
            # if no dot, then even remove the top level domain
            simple_url=""
            query_entries "$simple_url"
            break
        fi
        simple_url="$shorter_simple_url"
        query_entries "$simple_url"
        #die "No entry found for »$simple_url«"
        # enforce menu if we do "fuzzy" matching
        menu_if_one_entry=1
    done
    if [ 0 -eq "${#files[@]}" ] ; then
        die "No entry found for »$simple_url«"
    fi
}

# Backend implementations tell, how the actual password store is accessed.
# Right now, there is only one fully functional password backend, namely for
# the program "pass".
# A password backend consists of three actions:
#  - init() initializes backend-specific things and does sanity checks.
#  - query_entries() is called with a simplified url and is expected to fill
#    the bash array $files with the names of matching password entries. There
#    are no requirements how these names should look like.
#  - open_entry() is called with some specific entry of the $files array and is
#    expected to write the username of that entry to the $username variable and
#    the corresponding password to $password

reset_backend() {
    init() { true ; }
    query_entries() { true ; }
    open_entry() { true ; }
}

# choose_entry() is expected to choose one entry from the array $files and
# write it to the variable $file.
choose_entry() {
    choose_entry_zenity
}

# The default implementation chooses a random entry from the array. So if there
# are multiple matching entries, multiple calls to this userscript will
# eventually pick the "correct" entry. I.e. if this userscript is bound to
# "zl", the user has to press "zl" until the correct username shows up in the
# login form.
choose_entry_random() {
    local nr=${#files[@]}
    file="${files[$((RANDOM % nr))]}"
    # Warn user, that there might be other matching password entries
    if [ "$nr" -gt 1 ] ; then
        msg "Picked $file out of $nr entries: ${files[*]}"
    fi
}

# another implementation would be to ask the user via some menu (like rofi or
# dmenu or zenity or even qutebrowser completion in future?) which entry to
# pick
MENU_COMMAND=( head -n 1 )
# whether to show the menu if there is only one entry in it
menu_if_one_entry=0
choose_entry_menu() {
    local nr=${#files[@]}
    if [ "$nr" -eq 1 ] && ! ((menu_if_one_entry)) ; then
        file="${files[0]}"
    else
        file=$( printf '%s\n' "${files[@]}" | "${MENU_COMMAND[@]}" )
    fi
}

choose_entry_rofi() {
    MENU_COMMAND=( rofi -p "qutebrowser> " -dmenu
                        -mesg $'Pick a password entry for <b>'"${QUTE_URL//&/&amp;}"'</b>' )
    choose_entry_menu || true
}

choose_entry_zenity() {
    MENU_COMMAND=( zenity --list --title "qutebrowser password fill"
                          --text "Pick the password entry:"
                          --column "Name" )
    choose_entry_menu || true
}

choose_entry_zenity_radio() {
    zenity_helper() {
        awk '{ print $0 ; print $0 }'                   \
        | zenity --list --radiolist                     \
                 --title "qutebrowser password fill"    \
                 --text "Pick the password entry:"      \
                 --column " " --column "Name"
    }
    MENU_COMMAND=( zenity_helper )
    choose_entry_menu || true
}

# =======================================================
# backend: PASS

# configuration options:
match_filename=1 # whether allowing entry match by filepath
match_line=0     # whether allowing entry match by URL-Pattern in file
                 # Note: match_line=1 gets very slow, even for small password stores!
match_line_pattern='^url: .*' # applied using grep -iE
user_pattern='^(user|username|login): '

GPG_OPTS=( "--quiet" "--yes" "--compress-algo=none" "--no-encrypt-to" )
GPG="gpg"
export GPG_TTY="${GPG_TTY:-$(tty 2>/dev/null)}"
command -v gpg2 &>/dev/null && GPG="gpg2"
[[ -n $GPG_AGENT_INFO || $GPG == "gpg2" ]] && GPG_OPTS+=( "--batch" "--use-agent" )

pass_backend() {
    init() {
        PREFIX="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
        if ! [ -d "$PREFIX" ] ; then
            die "Can not open password store dir »$PREFIX«"
        fi
    }
    query_entries() {
        local url="$1"

        if ((match_line)) ; then
            # add entries with matching URL-tag
            while read -r -d "" passfile ; do
                if $GPG "${GPG_OPTS[@]}" -d "$passfile" \
                     | grep --max-count=1 -iE "${match_line_pattern}${url}" > /dev/null
                then
                    passfile="${passfile#$PREFIX}"
                    passfile="${passfile#/}"
                    files+=( "${passfile%.gpg}" )
                fi
            done < <(find -L "$PREFIX" -iname '*.gpg' -print0)
        fi
        if ((match_filename)) ; then
            # add entries with matching filepath
            while read -r passfile ; do
                passfile="${passfile#$PREFIX}"
                passfile="${passfile#/}"
                files+=( "${passfile%.gpg}" )
            done < <(find -L "$PREFIX" -iname '*.gpg' | grep "$url")
        fi
    }
    open_entry() {
        local path="$PREFIX/${1}.gpg"
        password=""
        local firstline=1
        while read -r line ; do
            if ((firstline)) ; then
                password="$line"
                firstline=0
            else
                if [[ $line =~ $user_pattern ]] ; then
                    # remove the matching prefix "user: " from the beginning of the line
                    username=${line#${BASH_REMATCH[0]}}
                    break
                fi
            fi
        done < <($GPG "${GPG_OPTS[@]}" -d "$path" | awk 1 )
    }
}
# =======================================================

# =======================================================
# backend: secret
secret_backend() {
    init() {
        return
    }
    query_entries() {
        local domain="$1"
        while read -r line ; do
            if [[ "$line" == "attribute.username = "* ]] ; then
                files+=("$domain ${line:21}")
            fi
        done < <( secret-tool search --unlock --all domain "$domain" 2>&1 )
    }
    open_entry() {
        local domain="${1%% *}"
        username="${1#* }"
        password=$(secret-tool lookup domain "$domain" username "$username")
    }
}
# =======================================================

# load some sane default backend
reset_backend
pass_backend
# load configuration
QUTE_CONFIG_DIR=${QUTE_CONFIG_DIR:-${XDG_CONFIG_HOME:-$HOME/.config}/qutebrowser/}
PWFILL_CONFIG=${PWFILL_CONFIG:-${QUTE_CONFIG_DIR}/password_fill_rc}
if [ -f "$PWFILL_CONFIG" ] ; then
    # shellcheck source=/dev/null
    source "$PWFILL_CONFIG"
fi
init

simplify_url "$QUTE_URL"
query_entries "${simple_url}"
no_entries_found
# remove duplicates
mapfile -t files < <(printf '%s\n' "${files[@]}" | sort | uniq )
choose_entry
if [ -z "$file" ] ; then
    # choose_entry didn't want any of these entries
    exit 0
fi
open_entry "$file"
#username="$(date)"
#password="XYZ"
#msg "$username, ${#password}"

[ -n "$username" ] || die "Username not set in entry $file"
[ -n "$password" ] || die "Password not set in entry $file"

js() {
cat <<EOF
    function isVisible(elem) {
        var style = elem.ownerDocument.defaultView.getComputedStyle(elem, null);

        if (style.getPropertyValue("visibility") !== "visible" ||
            style.getPropertyValue("display") === "none" ||
            style.getPropertyValue("opacity") === "0") {
            return false;
        }

        return elem.offsetWidth > 0 && elem.offsetHeight > 0;
    };
    function hasPasswordField(form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (input.type == "password") {
                return true;
            }
        }
        return false;
    };
    function loadData2Form (form) {
        var inputs = form.getElementsByTagName("input");
        for (var j = 0; j < inputs.length; j++) {
            var input = inputs[j];
            if (isVisible(input) && (input.type == "text" || input.type == "email")) {
                input.focus();
                input.value = "$(javascript_escape "${username}")";
                input.blur();
            }
            if (input.type == "password") {
                input.focus();
                input.value = "$(javascript_escape "${password}")";
                input.blur();
            }
        }
    };

    var forms = document.getElementsByTagName("form");
    for (i = 0; i < forms.length; i++) {
        if (hasPasswordField(forms[i])) {
            loadData2Form(forms[i]);
        }
    }
EOF
}

printjs() {
    js | sed 's,//.*$,,' | tr '\n' ' '
}
echo "jseval -q $(printjs)" >> "$QUTE_FIFO"
#+end_src

**** blocked hosts
:PROPERTIES:
:ID:       4fa0aadd-653c-4239-b456-d4922398254e
:END:
A list of hosts to block (in addition to those already given in the default
hosts file).

This set of urls is focused on blocking youtube ads, taken from [[https://www.reddit.com/r/dropgoogle/comments/5tnjxl/block_youtube_ads_2017_hosts_file/][this reddit
post]]. There are some mentions of other google products being broken by this
blocklist so Future Sam please remember writing this and play around with this
list if weird things happen in google docs.
#+begin_src shell :tangle "~/.config/qutebrowser/blockedHosts"
0.0.0.0 ads.doubleclick.net

0.0.0.0 s.ytimg.com

0.0.0.0 ad.youtube.com

0.0.0.0 ads.youtube.com

0.0.0.0 www.gstatic.com

0.0.0.0 gstatic.com

0.0.0.0 clients1.google.com

0.0.0.0 dts.innovid.com

0.0.0.0 googleads.g.doubleclick.net

0.0.0.0 googleads4.g.doubleclick.net

0.0.0.0 pagead2.googlesyndication.com

0.0.0.0 pixel.moatads.com

0.0.0.0 rtd.tubemogul.com

0.0.0.0 s.youtube.com

0.0.0.0 s.innovid.com

0.0.0.0 pubads.g.doubleclick.net

0.0.0.0 ssl.google-analytics.com

0.0.0.0 www-google-analytics.l.google.com

0.0.0.0 stats.g.doubleclick.net

0.0.0.0 clients.l.google.com

0.0.0.0 pagead.l.doubleclick.net

0.0.0.0 www-googletagmanager.l.google.com

0.0.0.0 googleadapis.l.google.com

0.0.0.0 s0.2mdn.net

0.0.0.0 googleads.g.doubleclick.net

0.0.0.0 ad.doubleclick.net

0.0.0.0 files.adform.net

0.0.0.0 secure-ds.serving-sys.com

0.0.0.0 securepubads.g.doubleclick.net

0.0.0.0 s.youtube.com

0.0.0.0 apis.google.com

0.0.0.0 2975c.v.fwmrm.net

0.0.0.0 static.doubleclick.net

0.0.0.0 googleadservices.com

0.0.0.0 ad-g.doubleclick.net

0.0.0.0 ad.doubleclick.net

0.0.0.0 ad.mo.doubleclick.net

0.0.0.0 doubleclick.net

0.0.0.0 googleads.g.doubleclick.net

0.0.0.0 pagead.googlesyndication.com

0.0.0.0 pagead1.googlesyndication.com

0.0.0.0 pagead2.googlesyndication.com

0.0.0.0 www.googleadservices.com

0.0.0.0 youtube-nocookie.com

0.0.0.0 www.youtube-nocookie.com

0.0.0.0 analytic-google.com

0.0.0.0 www.analytic-google.com

0.0.0.0 www.googletagservices.com

0.0.0.0 fwmrm.net

0.0.0.0 innovid.com

0.0.0.0 2mdn.net
#+end_src

More youtube related blocked hosts that weren't covered by the original list.
#+begin_src shell :tangle "~/.config/qutebrowser/blockedHosts"
0.0.0.0 yt3.ggpht.com
#+end_src
* Notes
** Hibernation
Currently dell xps has no swap partition/file setup, which prevents me from
hibernating/suspeding to disk:
#+begin_src shell :results example
systemctl hibernate
#+end_src

#+RESULTS:
#+begin_example
Failed to hibernate system via logind: Not enough swap space for hibernation
#+end_example

*** Set up swap file
I'm following the instructions from [[http://blog.programmableproduction.com/2016/02/22/ArchLinux-Powermanagement-Setting-Hibernate/][this blog article]].

**** Create swapfile
~fallocate~ to create swapfile. Memory to allocate should be about 2/5 of RAM, or
the recommended value in =/sys/power/image_size=. For me this is ~3220M.
#+begin_src shell :results output
fallocate -l 3220M /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
#+end_src

#+RESULTS:
: Setting up swapspace version 1, size = 3.1 GiB (3376410624 bytes)
: no label, UUID=2c67048a-18ed-4556-8a53-090c6065b89d


The current output of =/etc/fstab=:
#+begin_src shell :results output
cat /etc/fstab
#+end_src

#+RESULTS:
: # /etc/fstab: static file system information.
: #
: # Use 'blkid' to print the universally unique identifier for a device; this may
: # be used with UUID= as a more robust way to name devices that works even if
: # disks are added and removed. See fstab(5).
: #
: # <file system>             <mount point>  <type>  <options>  <dump>  <pass>
: UUID=9DB8-EA97                            /boot/efi      vfat    defaults,noatime 0 2
: UUID=96c4371f-8f39-4328-9420-830aefcad969 /              ext4    defaults,noatime 0 1

Update =/etc/fstab=:
#+begin_src shell
echo "/swapfile none swap defaults 0 0" >> /etc/fstab
#+end_src

#+RESULTS:

**** Update kernel startup params
Now we need to update grub with params about the swapfile.

#+begin_src shell :results output
cat /etc/default/grub
#+end_src

#+RESULTS:
#+begin_example
GRUB_DEFAULT=saved
GRUB_TIMEOUT=5
GRUB_TIMEOUT_STYLE=menu
GRUB_DISTRIBUTOR='Manjaro'
GRUB_CMDLINE_LINUX_DEFAULT="quiet"
GRUB_CMDLINE_LINUX=""

# If you want to enable the save default function, uncomment the following
# line, and set GRUB_DEFAULT to saved.
GRUB_SAVEDEFAULT=true

# Preload both GPT and MBR modules so that they are not missed
GRUB_PRELOAD_MODULES="part_gpt part_msdos"

# Uncomment to enable booting from LUKS encrypted devices
#GRUB_ENABLE_CRYPTODISK=y

# Uncomment to use basic console
GRUB_TERMINAL_INPUT=console

# Uncomment to disable graphical terminal
#GRUB_TERMINAL_OUTPUT=console

# The resolution used on graphical terminal
# note that you can use only modes which your graphic card supports via VBE
# you can see them in real GRUB with the command 'videoinfo'
GRUB_GFXMODE=auto

# Uncomment to allow the kernel use the same resolution used by grub
GRUB_GFXPAYLOAD_LINUX=keep

# Uncomment if you want GRUB to pass to the Linux kernel the old parameter
# format "root=/dev/xxx" instead of "root=/dev/disk/by-uuid/xxx"
#GRUB_DISABLE_LINUX_UUID=true

# Uncomment to disable generation of recovery mode menu entries
GRUB_DISABLE_RECOVERY=true

# Uncomment and set to the desired menu colors.  Used by normal and wallpaper
# modes only.  Entries specified as foreground/background.
GRUB_COLOR_NORMAL="light-gray/black"
GRUB_COLOR_HIGHLIGHT="green/black"

# Uncomment one of them for the gfx desired, a image background or a gfxtheme
#GRUB_BACKGROUND="/usr/share/grub/background.png"
GRUB_THEME="/usr/share/grub/themes/manjaro/theme.txt"

# Uncomment to get a beep at GRUB start
#GRUB_INIT_TUNE="480 440 1"
#+end_example

~resume~ parameter defines the drive that contains the swapfile. (This is the
entry from ~/etc/fstab~ with moint point ~/~ and a type of ~ext4~)

~resume_offset~ defines the point on the drive (defined above) where the swapfile
begins.
#+begin_src shell  :results output
sudo filefrag -v /swapfile
#+end_src

#+RESULTS:
#+begin_example
Filesystem type is: ef53
File size of /swapfile is 3376414720 (824320 blocks of 4096 bytes)
|     |     ext: | logical_offset: | physical_offset: |  length: | expected: | flags:             |           |
|  0: |      0.. |              0: |        1167360.. | 1167360: |        1: |                    |           |
|  1: |      1.. |           2047: |        1167361.. | 1169407: |     2047: | unwritten          |           |
|  2: |   2048.. |           4095: |        1177600.. | 1179647: |     2048: | 1169408:           | unwritten |
|  3: |   4096.. |           6143: |        1357824.. | 1359871: |     2048: | 1179648:           | unwritten |
|  4: |   6144.. |          10239: |        1390592.. | 1394687: |     4096: | 1359872:           | unwritten |
|  5: |  10240.. |          16383: |        1800192.. | 1806335: |     6144: | 1394688:           | unwritten |
|  6: |  16384.. |          18431: |        1808384.. | 1810431: |     2048: | 1806336:           | unwritten |
|  7: |  18432.. |          26623: |        1812480.. | 1820671: |     8192: | 1810432:           | unwritten |
|  8: |  26624.. |          28671: |        1822720.. | 1824767: |     2048: | 1820672:           | unwritten |
|  9: |  28672.. |          34815: |        1873920.. | 1880063: |     6144: | 1824768:           | unwritten |
| 10: |  34816.. |          65535: |        1912832.. | 1943551: |    30720: | 1880064:           | unwritten |
| 11: |  65536.. |          96255: |        1943552.. | 1974271: |    30720: | unwritten          |           |
| 12: |  96256.. |         126975: |        1974272.. | 2004991: |    30720: | unwritten          |           |
| 13: | 126976.. |         157695: |        2004992.. | 2035711: |    30720: | unwritten          |           |
| 14: | 157696.. |         188415: |        2035712.. | 2066431: |    30720: | unwritten          |           |
| 15: | 188416.. |         219135: |        2066432.. | 2097151: |    30720: | unwritten          |           |
| 16: | 219136.. |         249855: |        2129920.. | 2160639: |    30720: | 2097152:           | unwritten |
| 17: | 249856.. |         280575: |        2160640.. | 2191359: |    30720: | unwritten          |           |
| 18: | 280576.. |         311295: |        2191360.. | 2222079: |    30720: | unwritten          |           |
| 19: | 311296.. |         342015: |        2222080.. | 2252799: |    30720: | unwritten          |           |
| 20: | 342016.. |         372735: |        2252800.. | 2283519: |    30720: | unwritten          |           |
| 21: | 372736.. |         403455: |        2283520.. | 2314239: |    30720: | unwritten          |           |
| 22: | 403456.. |         434175: |        2314240.. | 2344959: |    30720: | unwritten          |           |
| 23: | 434176.. |         464895: |        2344960.. | 2375679: |    30720: | unwritten          |           |
| 24: | 464896.. |         495615: |        2375680.. | 2406399: |    30720: | unwritten          |           |
| 25: | 495616.. |         526335: |        2406400.. | 2437119: |    30720: | unwritten          |           |
| 26: | 526336.. |         557055: |        2437120.. | 2467839: |    30720: | unwritten          |           |
| 27: | 557056.. |         587775: |        2467840.. | 2498559: |    30720: | unwritten          |           |
| 28: | 587776.. |         618495: |        2498560.. | 2529279: |    30720: | unwritten          |           |
| 29: | 618496.. |         649215: |        2529280.. | 2559999: |    30720: | unwritten          |           |
| 30: | 649216.. |         679935: |        2560000.. | 2590719: |    30720: | unwritten          |           |
| 31: | 679936.. |         710655: |        2590720.. | 2621439: |    30720: | unwritten          |           |
| 32: | 710656.. |         741375: |        2656256.. | 2686975: |    30720: | 2621440:           | unwritten |
| 33: | 741376.. |         772095: |        2686976.. | 2717695: |    30720: | unwritten          |           |
| 34: | 772096.. |         802815: |        2717696.. | 2748415: |    30720: | unwritten          |           |
| 35: | 802816.. |         824319: |        2748416.. | 2769919: |    21504: | last,unwritten,eof |           |
/swapfile: 12 extents found
#+end_example

Both parameters are added to the ~GRUB_CMDLINE_LINUX~ parameter
#+begin_src shell :results output
# HOOKS="base udev autodetect modconf block keyboard keymap filesystems"
sed -i '/^GRUB_CMDLINE_LINUX=/ c\
GRUB_CMDLINE_LINUX="resume=UUID=96c4371f-8f39-4328-9420-830aefcad969 resume_offset=1167360"
' /etc/mkinitcpio.conf
#+end_src

#+RESULTS:

Generate new grub.cfg file
#+begin_src shell  :results output
grub-mkconfig -o /boot/grub/grub.cfg
#+end_src

#+RESULTS:

**** Update mkinitcpio
[[https://wiki.archlinux.org/index.php/mkinitcpio][mkinitcpio]] is a bash script to generate initial space where various kernel
modules are loaded before init takes over. (also handles things like
encryption). Need to add the resume parameter to the startup hook here so that
it's possible to resume from hibernation.

#+begin_src shell :results output
cat /etc/mkinitcpio.conf
#+end_src

#+RESULTS:
#+begin_example
# vim:set ft=sh
# MODULES
# The following modules are loaded before any boot hooks are
# run.  Advanced users may wish to specify all system modules
# in this array.  For instance:
#     MODULES=(piix ide_disk reiserfs)
MODULES=""

# BINARIES
# This setting includes any additional binaries a given user may
# wish into the CPIO image.  This is run last, so it may be used to
# override the actual binaries included by a given hook
# BINARIES are dependency parsed, so you may safely ignore libraries
BINARIES=()

# FILES
# This setting is similar to BINARIES above, however, files are added
# as-is and are not parsed in any way.  This is useful for config files.
FILES=""

# HOOKS
# This is the most important setting in this file.  The HOOKS control the
# modules and scripts added to the image, and what happens at boot time.
# Order is important, and it is recommended that you do not change the
# order in which HOOKS are added.  Run 'mkinitcpio -H <hook name>' for
# help on a given hook.
# 'base' is _required_ unless you know precisely what you are doing.
# 'udev' is _required_ in order to automatically load modules
# 'filesystems' is _required_ unless you specify your fs modules in MODULES
# Examples:
##   This setup specifies all modules in the MODULES setting above.
##   No raid, lvm2, or encrypted root is needed.
#    HOOKS=(base)
#
##   This setup will autodetect all modules for your system and should
##   work as a sane default
#    HOOKS=(base udev autodetect block filesystems)
#
##   This setup will generate a 'full' image which supports most systems.
##   No autodetection is done.
#    HOOKS=(base udev block filesystems)
#
##   This setup assembles a pata mdadm array with an encrypted root FS.
##   Note: See 'mkinitcpio -H mdadm' for more information on raid devices.
#    HOOKS=(base udev block mdadm encrypt filesystems)
#
##   This setup loads an lvm2 volume group on a usb device.
#    HOOKS=(base udev block lvm2 filesystems)
#
##   NOTE: If you have /usr on a separate partition, you MUST include the
#    usr, fsck and shutdown hooks.
HOOKS="base udev autodetect modconf block keyboard keymap filesystems"

# COMPRESSION
# Use this to compress the initramfs image. By default, gzip compression
# is used. Use 'cat' to create an uncompressed image.
#COMPRESSION="gzip"
#COMPRESSION="bzip2"
#COMPRESSION="lzma"
#COMPRESSION="xz"
#COMPRESSION="lzop"
#COMPRESSION="lz4"

# COMPRESSION_OPTIONS
# Additional options for the compressor
#COMPRESSION_OPTIONS=()
#+end_example

We need to update the hooks list currently in the above conf to include ~resume~
#+begin_src shell :results output
# HOOKS="base udev autodetect modconf block keyboard keymap filesystems"
sed -i '/^HOOKS=/ c\
HOOKS="base udev autodetect modconf block keyboard keymap filesystems resume"
' /etc/mkinitcpio.conf
#+end_src

#+RESULTS:

Generate the boot image. The ~-p~ option can be used to specify which preset to
generate an initramfs for. The ~-P~ option can be used to generate an initramf for
all presets in the =/etc/mkinitcpio.d/= directory. Since I only have one preset
file in there, I used ~-P~
#+begin_src shell  :results output
mkinitcpio -P
#+end_src

#+RESULTS:
#+begin_example
==> Building image from preset: /etc/mkinitcpio.d/linux419.preset: 'default'
  -> -k /boot/vmlinuz-4.19-x86_64 -c /etc/mkinitcpio.conf -g /boot/initramfs-4.19-x86_64.img
==> Starting build: 4.19.32-1-MANJARO
  -> Running build hook: [base]
  -> Running build hook: [udev]
  -> Running build hook: [autodetect]
  -> Running build hook: [modconf]
  -> Running build hook: [block]
  -> Running build hook: [keyboard]
  -> Running build hook: [keymap]
  -> Running build hook: [filesystems]
  -> Running build hook: [resume]
==> Generating module dependencies
==> Creating gzip-compressed initcpio image: /boot/initramfs-4.19-x86_64.img
==> Image generation successful
==> Building image from preset: /etc/mkinitcpio.d/linux419.preset: 'fallback'
  -> -k /boot/vmlinuz-4.19-x86_64 -c /etc/mkinitcpio.conf -g /boot/initramfs-4.19-x86_64-fallback.img -S autodetect
==> Starting build: 4.19.32-1-MANJARO
  -> Running build hook: [base]
  -> Running build hook: [udev]
  -> Running build hook: [modconf]
  -> Running build hook: [block]
  -> Running build hook: [keyboard]
  -> Running build hook: [keymap]
  -> Running build hook: [filesystems]
  -> Running build hook: [resume]
==> Generating module dependencies
==> Creating gzip-compressed initcpio image: /boot/initramfs-4.19-x86_64-fallback.img
==> Image generation successful
#+end_example

**** Systemd handle
I also use systemd as a base for things like this. In the
=/etc/systemd/logind.conf= file we could set the following options:
#+begin_src shell
HandleLidSwitch=hibernate
IdleAction=hibernate
IdleActionSec=30min
#+end_src

* Plans
** DONE better lock screen
CLOSED: [2019-02-09 Sat 10:56]
- State "DONE"       from "TODO"       [2019-02-09 Sat 10:56]
** DONE still getting some unknown characters in terminal
CLOSED: [2019-02-16 Sat 14:33]
- State "DONE"       from "TODO"       [2019-02-16 Sat 14:33]
** DONE window management
CLOSED: [2019-02-09 Sat 10:56]
- State "DONE"       from "TODO"       [2019-02-09 Sat 10:56]
- try using i3
** DONE i3 gaps
- State "DONE"       from "TODO"       [2019-05-11 Sat 14:19]
** TODO polybar
** CANCELLED weechat + weeslack + weemacs
CLOSED: [2019-03-14 Thu 18:23]
- State "CANCELLED"  from "TODO"       [2019-03-14 Thu 18:23] \\
  emacs slack package works better, and probably will just use erc for irc channels/gitter
** TODO pystatus instead of i3status?
https://github.com/ultrabug/py3status
** TODO screenshots
** TODO save and restore i3 window layout
** TODO i3 alternating layours
https://github.com/olemartinorg/i3-alternating-layout
** TODO syncthing instead of dropbox?
https://docs.syncthing.net/intro/getting-started.html#getting-started
- seems like I would need a server OR use phone as intermediary for between work
  and home??
