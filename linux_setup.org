* Linux Machine Config
I am attempting to setup a linux machine using an entirely literate config,
manage through org-mode files. My goal is to have several org files, with code
that is tangled to the appropriate locations.

This is still very much a work in progress.

** Git Config
:PROPERTIES:
:ID:       22443b22-e1b4-4e8d-9228-4908aeeccad4
:END:
Set up my user name and email address for git.
#+begin_src yaml :tangle "~/.gitconfig" :mkdirp yes
[user]
  email = srpillsworth@gmail.com
  name = Sam Pillsworth
#+end_src
** GPG agent configuration
:PROPERTIES:
:ID:       ff9df46b-bcf7-40e8-bbd1-edb3030df298
:END:
I keep my password store encrypted, and I don't want to have to type my master
key every time I need to access a password. I also don't want to store my master
key in any sort of a keychain, partly because I'm paranoid but also partly
because that seems like it would take effort to set up.

Instead I setup a longer cache time for my gpg-agent.

#+begin_src shell :tangle "~/.gnupg/gpg-agent.conf" :mkdirp yes
allow-emacs-pinentry
allow-loopback-pinentry
max-cache-ttl 10800
default-cache-ttl 10800
log-file /var/log/gpg-agent.log
pinentry-program /usr/bin/pinentry
#+end_src
** Package Installation and Minimal Setup
:PROPERTIES:
:ID:       8b53258b-b348-4001-8782-971aac6402d7
:END:
In order to get my literate config files onto a new machine and run them, I'll
need git and emacs at least. So I figure why not handle package installs before
we get into the org-mode stuff.

I keep the packages I want to install in =packages.txt=:

#+begin_src shell :tangle "packages.txt" :mkdirp yes
community/pandoc
community/pass
community/powerline
community/qutebrowser
community/rofi
community/the_silver_searcher
community/tmux
extra/emacs
extra/python-pip
extra/xclip
extra/xorg-xclipboard
#+end_src

I use a bash script to handle the installation and fetching of packages (either
through pacman or by cloning git repositories).
#+begin_src shell :tangle "manjaro_setup.sh" :tangle-mode (identity #o755) :mkdirp yes
#!/usr/bin/env bash

sudo pacman -Syyu
sudo pacman -Syu --noconfirm $(cat ~/package_list.txt | awk '{print $1}')
sudo pacman -Rs $(pacman -Qdtq)

if [ ! -d ~/.password-store ]; then
    echo "setting up password-store"
    git clone git@gitlab.com:samspills/passwords ~/.password-store
    pass init --path=~/.password-store Sam Pillsworth
    pass git init
fi

if [ ! -f ~/.antigen.zsh ]; then
    echo "fetching antigen"
    curl -L git.io/antigen > ~/.antigen.zsh
fi

if [ ! -d ~/dotfiles ]; then
    echo "fetching dotfiles repo"
    git clone git@github.com:samspills/dotfiles /home/sam/dotfiles
    ln -s /home/sam/dotfiles/dot-emacs/.spacemacs /home/sam/.spacemacs
fi

if [ ! -d ~/.emacs.d ]; then
    echo "fetching spacemacs fork"
    git clone git@github.com:samspills/spacemacs ~/.emacs.d
    ln -s /home/sam/dotfiles/dot-emacs/custom.el /home/sam/.emacs.d/custom.el
fi

if [ ! "$SHELL" = "$(which zsh)" ]; then
    chsh -s $(which zsh)
fi

if [ ! -d ~/.etc/rofi-pass ]; then
    echo "fetching rofi-pass"
    git clone git@github.com:carnager/rofi-pass.git ~/.etc/rofi-pass
fi
#+end_src

#+NAME: A note about what installs belong here and which don't
#+begin_comment
The above package list and script installs what I consider necessary for a
minimally functional copy of my setup. Pandoc and rofi for example aren't
necessary for i3 or emacs to work. But they are an important part of my flow.
My goal for this particular section is that that it should the minimal installs
necessary for _functional day-to-day_ work. It is my goal to be able to restart my
system from this section, finish the work week, and then I can address other
requirements as necessary.
#+end_comment

*** fzf
I use [[https://github.com/junegunn/fzf][fzf]] for shell history + completion. Completion of file names, configured
ssh servers, environment variables, and probably a lot of other things can be
triggered with ~**~.
#+begin_src shell :results output
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
cd ~/.fzf/
./install
#+end_src

#+RESULTS:
#+begin_example
Downloading bin/fzf ...
  - Already exists
  - Checking fzf executable ... 0.17.5

Generate /home/sam/.fzf.bash ... OK
Generate /home/sam/.fzf.zsh ... OK

Update /home/sam/.bashrc:
  - [ -f ~/.fzf.bash ] && source ~/.fzf.bash
    - Already exists: line #1

Update /home/sam/.zshrc:
  - [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    - Already exists: line #76

Finished. Restart your shell or reload config file.
   source ~/.bashrc  # bash
   source ~/.zshrc   # zsh

Use uninstall script to remove fzf.

For more information, see: https://github.com/junegunn/fzf
#+end_example

** X11
*** xmodmap
:PROPERTIES:
:ID:       c2789703-b11d-4a42-88fc-5b5332242ef2
:END:
~xmodmap~ is a utility that modifies keybindings in =XOrg=. Modifications can be
specified directly in a command line argument or they can be written in a
configuration file and executed against using ~xmodmap /path/to/config/file~.

All of my configurations will be tangled to =~/.config/xmodmaprc=, and I want the
~xmodmap~ command in my =~/.xinitrc= so that the modifications will be applied at
the start of every X session.

#+begin_src shell :tangle "~/.xinitrc" :mkdirp yes
xmodmap ${HOME}/.config/xmodmaprc
#+end_src

#+RESULTS:

**** Remap caps lock to ctrl
:PROPERTIES:
:ID:       3ee2ee10-84dc-494d-b125-1a17a11f7093
:END:
I never use caps lock, so I rebind the key to another ctrl. I don't swap them
because I honestly feel that three ctrl keys is more useful than 2 ctrl keys and
a caps lock key, no matter where the caps lock key is located.
#+begin_src shell :tangle "~/.config/xmodmaprc" :mkdirp yes
remove Lock = Caps_Lock
remove Control = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
#+end_src
*** xinitrc
:PROPERTIES:
:ID:       c02ec5f1-ea87-40b2-a353-6e088285d8a9
:END:
A very minimal xinitrc to load up my ~.Xresources~ before executing i3
#+begin_src shell :tangle "~/.xinitrc" :mkdirp yes
[[ -f ~/.Xresources ]] && xrdb -merge "${HOME}/.Xresources"
exec i3
#+end_src
*** .Xresources (some but not all)
:PROPERTIES:
:ID:       b24a26b9-8f57-48c5-8fd4-588833966455
:END:
I used [[https://github.com/auduchinok/base16-builder][base16-builder]] to generate an ~.Xresources~ template for the spacemacs dark theme.
#+begin_src shell
! Base16 Spacemacs
! Scheme: Nasser Alshammari (https://github.com/nashamri/spacemacs-theme)

#define base00 #1f2022
#define base01 #282828
#define base02 #444155
#define base03 #585858
#define base04 #b8b8b8
#define base05 #a3a3a3
#define base06 #e8e8e8
#define base07 #f8f8f8
#define base08 #f2241f
#define base09 #ffa500
#define base0A #b1951d
#define base0B #67b11d
#define base0C #2d9574
#define base0D #4f97d7
#define base0E #a31db1
#define base0F #b03060

*foreground:   base05
*background:   base00
*cursorColor:  base05

*color0:       base00
*color1:       base08
*color2:       base0B
*color3:       base0A
*color4:       base0D
*color5:       base0E
*color6:       base0C
*color7:       base05

*color8:       base03
*color9:       base08
*color10:      base0B
*color11:      base0A
*color12:      base0D
*color13:      base0E
*color14:      base0C
*color15:      base07

! Note: colors beyond 15 might not be loaded (e.g., xterm, urxvt),
! use 'shell' template to set these if necessary
*color16:      base09
*color17:      base0F
*color18:      base01
*color19:      base02
*color20:      base04
*color21:      base06
#+end_src

Some other default ~.Xresources~ settings. Enable unicode, save very many lines,
and then set some Xft settings as well. Full disclosure, I don't actually know
what all the Xft settings are for.
#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
*utf8:                  1
*saveLines:             999999
#+end_src

What is an ~Xft~ setting? I have no idea
#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
!-- Xft settings -- !
Xft.dpi:        144
Xft.rgba:       rgb
Xft.autohint:   0
Xft.lcdfilter:  lcddefault
Xft.hintstyle:  hintfull
Xft.hinting:    1
Xft.antialias:  1
#+end_src
** Shell
*** zsh
**** Environment
:PROPERTIES:
:ID:       34b5f30b-cb5b-463d-89e8-e20aff13f736
:END:
 #+begin_src shell :tangle "~/.zshenv" :mkdirp yes
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:$PATH
 #+end_src
**** Antigen
:PROPERTIES:
:ID:       bfb63105-5c3b-4a20-99cb-571aa9a48f38
:END:
I use antigen + oh-my-zsh to manage my zsh config for the most part
#+begin_src  shell :tangle "~/.zshrc" :mkdirp yes
source ~/.antigen.zsh
antigen use oh-my-zsh

antigen bundle colored-man-pages
antigen bundle colorize
antigen bundle virtualenvwrapper
antigen bundle pip
antigen bundle python

antigen theme https://github.com/VidalChavez/pygmalion.git --loc=pygmalion

antigen apply
#+end_src
**** Functions
:PROPERTIES:
:ID:       79e8b3d6-3631-4f98-8174-6d295e26c347
:END:
Here are all of my custom zsh functions. I also tend to use functions over
aliases.
#+begin_src shell :tangle "~/.zshrc" :mkdirp yes
function jql() { jq -C "." <$* | less; }
function cowfig() {figlet "$*" | cowsay -n}
function cpcowfig() {figlet "$*" | cowsay -n | pbcopy}
function agp() {ag --py $*}
function gitsync() {rsync -t $(git diff --name-only) --relative $1}
function luigiui() {open -a "Google Chrome" $(plumb --host dev-magnezone-$1-1.rubikloudcorp.com status $2 | jq -r '.owner_public_ip' | awk ' {print "http://" $0 ":8082"} ')}
function jn() {open -a "Google Chrome" "http://localhost:$1/tree?"}
function jigh() {jig --host dev-configapi.rubikloudcorp.com $*}
function plumbh() {plumb --host dev-magnezone.rubikloudcorp.com $*}
function plumbh-log() {plumbh log $1 stdout > log && vim log}

# Rubikloud Functions
function lithium-jupyter() {scp spillsworth@lithium:/home/spillsworth/.run/current_kernel.json . && jupyter console --existing ./current_kernel.json --ssh lithium}
function saws() {aws ec2 ${1}-instances --instance-ids i-01a4312b35d89399c  --region eu-west-1}
function s3fstoken() {
    aws-vault exec --no-session --assume-role-ttl 12h ${1:-default} -- python -c 'import os; print("""s3 = s3fs.S3FileSystem(key="{}", secret="{}", token="{}")""".format(os.getenv("AWS_ACCESS_KEY_ID"), os.getenv("AWS_SECRET_ACCESS_KEY"), os.getenv("AWS_SESSION_TOKEN")))'
}
function s3atoken() {
    aws-vault exec --no-session --assume-role-ttl 12h ${1:-default} -- python -c 'import os; print("""
hadoop_conf.set("fs.s3a.aws.credentials.provider", "org.apache.hadoop.fs.s3a.TemporaryAWSCredentialsProvider")
hadoop_conf.set("fs.s3a.access.key", "{}")
hadoop_conf.set("fs.s3a.secret.key", "{}")
hadoop_conf.set("fs.s3a.session.token", "{}")
""".format(os.getenv("AWS_ACCESS_KEY_ID"), os.getenv("AWS_SECRET_ACCESS_KEY"), os.getenv("AWS_SESSION_TOKEN")))'
}
#+end_src
**** Exports and aliases
:PROPERTIES:
:ID:       424bc62d-1633-4633-8e9b-82f47767e150
:END:
Here I export some values and set a few aliases
#+begin_src shell :tangle "~/.zshrc" :mkdirp yes
export GTAGSLABEL=pygments
export EDITOR='emacsclient -a vim -u -q'

alias ec='emacsclient -u -q'
alias l='ls -lhFu'
alias tmux="tmux -2 -u"
alias zshconfig="ec ~/.zshrc"
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'
#+end_src
**** Terminal specific settings
:PROPERTIES:
:ID:       1d545107-9939-4d9a-8dc9-46d465e5afee
:END:
#+begin_src shell :tangle "~/.zshrc" :mkdirp yes
bindkey -v
KEYTIMEOUT=1

setopt CORRECT

# History options
HISTSIZE=10000000
SAVEHIST=10000000
setopt inc_append_history
setopt share_history
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
#+end_src

I also have some terminal settings explicitly for when the terminal is dumb.
This is the case when using emacs + tramp to work remotely. When remoting into a
machine via tramp, all of the zsh config can really slow it down and also the
prompt can cause problems (it's been a long time since I set this up and I don't
remember the exact issue I was having).
#+begin_src shell :tangle "~/.zshrc" :mkdirp yes
if [[ "$TERM" == "dumb" ]]
then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    unfunction precmd
    unfunction preexec
    PS1='$ '
fi
#+end_src

I use ~fzf~ for history search/completion.
#+begin_src shell :tangle "~/.zshrc" :mkdirp yes
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
#+end_src

Finally, source the environment file
#+begin_src shell :tangle "~/.zshrc" :mkdirp yes
source ~/.zshenv
#+end_src
*** urxvt
:PROPERTIES:
:ID:       1aacc5fb-6982-414a-9551-74d960b4c2f6
:END:

Set the spacemacs colour scheme for URxvt.
#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
! Base16 Spacemacs
! Scheme: Nasser Alshammari (https://github.com/nashamri/spacemacs-theme)

! URxvt*tintColor:                      color
! URxvt*fadeColor:                      color

URxvt*background:                     #1f2022
URxvt*foreground:                     #a3a3a3
URxvt*cursorColor:                    #a3a3a3

! URxvt*colorBD:                        color
! URxvt*colorIT:                        color
! URxvt*colorUL:                        color
! URxvt*colorRV:                        color
! URxvt*underlineColor:                 color
URxvt*scrollColor:                    #a3a3a3
! URxvt*troughColor:                    color
URxvt*highlightColor:                 #444155
URxvt*highlightTextColor:             #b8b8b8
! URxvt*cursorColor2:                   color
! URxvt*pointerColor:                   color
! URxvt*pointerColor2:                  color
! URxvt*borderColor:                    color
! URxvt*tab-bg:                         colour
! URxvt*tab-fg:                         colour
! URxvt*tabbar-bg:                      colour
! URxvt*tabbar-fg:                      colour

URxvt*color0:                         #1f2022
URxvt*color1:                         #f2241f
URxvt*color2:                         #67b11d
URxvt*color3:                         #b1951d
URxvt*color4:                         #4f97d7
URxvt*color5:                         #a31db1
URxvt*color6:                         #2d9574
URxvt*color7:                         #a3a3a3
URxvt*color8:                         #585858
URxvt*color9:                         #f2241f
URxvt*color10:                        #67b11d
URxvt*color11:                        #b1951d
URxvt*color12:                        #4f97d7
URxvt*color13:                        #a31db1
URxvt*color14:                        #2d9574
URxvt*color15:                        #f8f8f8

! 256 color space
URxvt*color16:                        #ffa500
URxvt*color17:                        #b03060
URxvt*color18:                        #282828
URxvt*color19:                        #444155
URxvt*color20:                        #b8b8b8
URxvt*color21:                        #e8e8e8

#+end_src

Some ~.Xresources~ configuration for urxvt, my terminal emulator of choice.

Set the default font to be Iosevka, with Symbola as a backup for any missing
glyphs. So far this has been a really great combination for me.
#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
! -- URxvt Fonts -- !
URxvt.font:xft:Iosevka Nerd Font:pixelsize=16:style=regular
URxvt.boldFont:xft:Iosevka Nerd Font:pixelsize=16:style=bold
URxvt.italicFont:xft:Iosevka Nerd Font:pixelsize=16:style=italic
URxvt.bolditalicFont:xft:Iosevka Nerd Font:pixelsize=16:style=bold:style=italic
#+end_src

The ~URxvt*letterSpace~ setting helps with cases where some font glyphs are not
truly monospaced. This can be an issue when using something like font-awesome.
I'm not sure I need this since I'm using Symbola instead, but it's something to
keep in mind.
#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
URxvt*letterSpace: +1
#+end_src

Finally just some straightforward terminal settings: allow bold fonts, turn off
the scrollbar, and switch the cursor to an underline.
#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
URxvt*allow_bold: true
URxvt.scrollBar: false
URxvt*cursorUnderline: true
#+end_src

** i3
*** Configuration
:PROPERTIES:
:ID:       705e0a62-fe76-4269-bd44-5a7ee7d62f80
:END:
**** Set variables
:PROPERTIES:
:ID:       392bea2b-c4cb-4c01-9877-693ca6a50fe5
:END:

I'm setting some variables first to keep them in an easy-to-find place,
for easy updating. These are either things I think I might want to change
(~$mod~), or commands that will be executed that I might want to update frequently.

#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
set $mod Mod4
set $term urxvt
set $menu --no-startup-id rofi -combi-mode "window#drun#run" -show combi -modi combi -show-icons -display-combi ""
set $pass rofi-pass -display-pass "sam"
set $barcmd i3status
set $lock --no-startup-id i3lock-extra -p 5 -m pixelize
#+end_src

**** Beautify
:PROPERTIES:
:ID:       e8ecd02b-b952-4f4f-8ff4-6e64891d3267
:END:
The beautifying part of my i3 configuration: font settings, borders, colours,
generally making things pretty.

I like to use the [[https://github.com/be5invis/iosevka][Iosevka]] font for everything.
#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango: Iosevka Nerd Font 12
#+end_src

I use the same font for the status bar (setting the font here isn't strictly
necessary but I like to be explicit). Then I load the =i3status.conf= (see
[[id:3580802b-dc7d-41d4-b84f-12cb717a9084][i3status]] for that configuration file).
#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
bar {
  font pango:Iosevka Nerd Font 12
  status_command $barcmd --config /etc/i3status.conf
}
#+end_src

Setup a tabbed layout by default.
#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
workspace_layout tabbed
#+end_src

Also hide the edge borders around windows.
#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
for_window [class="^.*"] border pixel 0
#+end_src

Jess Frazelle sets different borders for spotify and sets other windows to have
floating enabled by default in [[https://github.com/jessfraz/dotfiles/blob/master/.i3/config][her config]]. I don't really know why these
settings are set this way. I'm leaving it all for now just to see what happens
and if I hate it or love it (or feel nothing).

#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
# spotify: no border
for_window [class="^Spotify$"] border none
for_window [class="^Spotify Premium$"] border none

# skype, steam, wine: float Gimp
for_window [class="Code"] floating enable
for_window [class="Firefox"] floating enable
for_window [class="Gimp"] floating enable
for_window [class="google-chrome"] floating enable
for_window [class="Google-chrome"] floating enable
for_window [class="Keybase"] floating enable
for_window [class="Neoman"] floating enable
for_window [class="NES"] floating enable
for_window [class="Pidgin"] floating enable
for_window [class="Portal"] floating enable
for_window [class="RStudio"] floating enable
for_window [class="Skype"] floating enable
for_window [class="Slack"] floating enable
for_window [class="Steam"] floating enable
for_window [class="Tor Browser"] floating enable
for_window [class="Virt-viewer"] floating enable
for_window [class="VirtualBox"] floating enable
for_window [class="vlc"] floating enable
for_window [class="Wine"] floating enable
for_window [class="Wireshark"] floating enable
#+end_src
**** Functionality
This section contains little snippets to provide a certain functionality or
behaviour in i3.
***** Auto focus to urgent window
:PROPERTIES:
:ID:       5541cb47-3f37-4a7e-9166-f3ac16276943
:END:
If a workspace has an urgent window, then I want to switch to that workspace
automatically. I use the running emacsclient (in GUI mode) as my editor and if
the terminal triggers an edit (through git or pass for example) then this
sitting causes the focus to automatically switch to emacs. Very nice.

#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
for_window [urgent=latest] focus
#+end_src
**** Keybindings
:PROPERTIES:
:ID:       01df5ea3-4821-4c01-b828-2b21d532eaa2
:END:
To start, I'm just stealing the whole configuration setup by Jess Frazelle, and
can be [[https://github.com/jessfraz/dotfiles/blob/master/.i3/config][found here]]
#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec $term

# start dmenu
bindsym $mod+d exec $menu

# pass menu
bindsym $mod+p exec $pass

# lock
bindsym $mod+l exec $lock

# kill focused window
bindsym $mod+Shift+q kill

# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+semicolon focus right

# move to monitor
bindsym $mod+Shift+Left move workspace to output left
bindsym $mod+Shift+Right move workspace to output right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# alternatively, you can use the cursor keys:
# bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
# bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+bar split h

# split in vertical orientation
bindsym $mod+minus split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# audio controls
bindsym XF86AudioRaiseVolume exec amixer -D pulse set Master 5%+ #increase sound volume
bindsym XF86AudioLowerVolume exec amixer -D pulse set Master 5%- #decrease sound volume
bindsym XF86AudioMute exec amixer -D pulse set Master toggle # mute sound
bindsym XF86AudioMicMute exec amixer -D pulse set Capture toggle # mute mic

# screen brightness controls
bindsym XF86MonBrightnessUp exec xbacklight -inc 5 # increase screen brightness
bindsym XF86MonBrightnessDown exec xbacklight -dec 5 # decrease screen brightness

# Screenshots
# bindsym --release Print exec import "${HOME}/Pictures/Screenshots/$(date +'%Y-%m-%d-%H-%M-%S').png"
bindsym --release $mod+Print exec "scrot -q 100 -s ${HOME}'/Pictures/Screenshots/%Y-%m-%d-%H-%M-%S_$wx$h.png'"
# Screenshot fullscreen
# bindsym Print exec "scrot -q 100 ${HOME}'/Pictures/Screenshots/%Y-%m-%d-%H-%M-%S_$wx$h.png' -e ${HOME}'/google-cloud-sdk/bin/gsutil cp -a public-read $f gs://misc.j3ss.co/screenshots/ && echo https://misc.j3ss.co/screenshots/$n | xclip -i -selection clipboard'"
# # Screenshot fullscreen, sway
# #bindsym Shift+Print exec "swaygrab ${HOME}/Pictures/Screenshots/$(date '+%Y-%m-%d-%H-%M-%S').png"
# # Screenshot with selection
# bindsym $mod+Print exec "sleep 0.4; scrot -q 100 -s ${HOME}'/Pictures/Screenshots/%Y-%m-%d-%H-%M-%S_$wx$h.png' -e ${HOME}'/google-cloud-sdk/bin/gsutil cp -a public-read $f gs://misc.j3ss.co/screenshots/ && echo https://misc.j3ss.co/screenshots/$n | xclip -i -selection clipboard'"
# # Screenshot capture, sway
# #bindsym Shift+Print exec "swaygrab -c ${HOME}/Pictures/Screenshots/$(date '+%Y-%m-%d-%H-%M-%S').webm"
# # Screenshot current focused window
# bindsym Shift+Print exec "scrot -q 100 -u ${HOME}'/Pictures/Screenshots/%Y-%m-%d-%H-%M-%S_$wx$h.png' -e ${HOME}'/google-cloud-sdk/bin/gsutil cp -a public-read $f gs://misc.j3ss.co/screenshots/ && echo https://misc.j3ss.co/screenshots/$n | xclip -i -selection clipboard'"
# # Screenshot current focused window, sway
# #
# bindsym Shift+Print exec "swaygrab --focused ${HOME}/Pictures/Screenshots/$(date '+%Y-%m-%d-%H-%M-%S').png"

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exit

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"
#+end_src

*** i3lock
:PROPERTIES:
:ID:       e2bee763-884e-431f-b299-de1bf739163c
:END:

I like the lockscreen style described in [[https://github.com/brunodles/i3wm-conf][brunodles i3 config]], so I have stolen it.

#+begin_src shell :tangle "~/bin/i3lock-extra" :tangle-mode (identity #o775) :mkdirp yes
#!/usr/bin/env bash

cfg_tmpdir="/run/user/$UID/i3lock-extra"
cfg_lockfile="$cfg_tmpdir/locked"
cfg_pixelize_scale='10'

err() { echo "$*" >&1; }

usage() {
  while read; do printf '%s\n' "$REPLY"; done <<- EOF
    Usage: i3lock-extra <-m mode> [args]
    Flags:
           --mode|-m <mode>    # Lock mode.
           --tmpdir|-d <path>  # Directory to store temporary files in. This should not be accessible by other users!
           --pixelize-scape|-p # For the pixelize mode only. Sets the number by which the image is resized down and
                                 back up to achieve the pixelize effect. For example, 4 means that it will be resized
                                 to 1/4 of the original and blown back up.
    Modes:
           rnd <dir>           # Use a random image from a dir.
           blur [img]          # Take a screenshot, blur it out. If provided, add an image on top.
           pixelize [img]      # Same as the above, but pixelize the image instead.
           img <img>           # Use the provided image.
EOF
}

random() {
  images_dir=$1

  images=( "$images_dir"/* )
  images_c="${#images[*]}"
  image_r=$(( RANDOM % images_c ))
  image="${images[$image_r]}"

  printf '%s' "$image"
}

deskshot() {
  declare scale_down scale_up
  declare dist_mode=$1; shift

  case "$dist_mode" in
    blur) scrot -e "convert -gaussian-blur 4x8 \$f ${cfg_tmpdir}/lockbg.png" "${cfg_tmpdir}/lockbg.png";;
    pixelize)
      scale_down=$(( 100/cfg_pixelize_scale ))
      scale_up=$(( ( 100/cfg_pixelize_scale ) * cfg_pixelize_scale * cfg_pixelize_scale ))

      scrot -e "convert \$f -scale "$scale_down"% -scale "$scale_up"% ${cfg_tmpdir}/lockbg.png" "${cfg_tmpdir}/lockbg.png"
    ;;
  esac

  if [[ "$1" ]]; then
    convert -gravity center -composite -matte "${cfg_tmpdir}/lockbg.png" "$1" "${cfg_tmpdir}/lockbg.png"
  fi

  image="${cfg_tmpdir}/lockbg.png"
  printf '%s' "$image"
}

lock() {
  >"$cfg_lockfile"
  i3lock -n -t -i "$image"
}

cleanup() {
  rm -f "$cfg_lockfile";
}

main() {
  umask 0077 # All files and dirs created should only be accessible by the user.

  while (( $# )); do
    case "$1" in
      --help|-h) usage; return 0;;
      --mode|-m) mode=$2; shift;;
      --tmpdir|-d) cfg_tmpdir=$2; shift;;
      --umask|-u) umask $2; shift;;
      --pixelize-scale|-p) cfg_pixelize_scale=$2; shift;;

      --) shift; break;;
      -*)
        err "Unknown key: $1"
        usage
        return 1
      ;;

      ,*) break;;
    esac
    shift
  done

  if ! [[ -d "$cfg_tmpdir" ]]; then
    mkdir -p "$cfg_tmpdir" || {
      return 1
    }
  fi

  case "${mode:-img}" in
    blur|pixelize) image=$( deskshot "$mode" "$1" );;

    rnd)
      (( $# )) || { usage; return 1; }
      image=$( random "$1" )
    ;;

    img)
      (( $# )) || { usage; return 1; }
      image="$1"
    ;;

    ,*) usage; return 1;;
  esac

  trap cleanup INT TERM EXIT

  until lock; do
    true
  done
}
main "$@"

#+end_src
*** fin
:PROPERTIES:
:ID:       0d5acb35-2fed-4d52-9dd6-a5621c1dd97f
:END:
This section contains any lines that must be executed at the end of the i3
config.

#+begin_src shell :tangle "~/.config/i3/config" :mkdirp yes
# run the merge for good colors
exec --no-startup-id xrdb -merge $HOME/.Xresources
#+end_src
** rofi
*** Installation

Now we can install i3, and some of the utilities that my i3 setup relies on.
These are rxvt, and scrot.
#+begin_src shell :dir "/sudo::" :cache no :results output
#+end_src

#+RESULTS:
#+begin_example
Reading package lists... 0%Reading package lists... 100%Reading package lists... Done
Building dependency tree... 0%Building dependency tree... 0%Building dependency tree... 50%Building dependency tree... 50%Building dependency tree       
Reading state information... 0%Reading state information... 0%Reading state information... Done
The following package was automatically installed and is no longer required:
  libllvm6.0
Use 'sudo apt autoremove' to remove it.
The following additional packages will be installed:
  libxcb-ewmh2
The following NEW packages will be installed:
  libxcb-ewmh2 rofi
0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.
Need to get 180 kB of archives.
After this operation, 632 kB of additional disk space will be used.
[33m0% [Working][0m            Get:1 http://archive.ubuntu.com/ubuntu bionic/main amd64 libxcb-ewmh2 amd64 0.4.1-1ubuntu1 [16.6 kB]
[33m1% [1 libxcb-ewmh2 2,615 B/16.6 kB 16%][0m[33m                                       17% [Working][0m             Get:2 http://archive.ubuntu.com/ubuntu bionic/universe amd64 rofi amd64 1.5.0-1 [163 kB]
[33m19% [2 rofi 2,613 B/163 kB 2%][0m[33m                              100% [Working][0m              Fetched 180 kB in 1s (266 kB/s)
Selecting previously unselected package libxcb-ewmh2:amd64.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 255922 files and directories currently installed.)
Preparing to unpack .../libxcb-ewmh2_0.4.1-1ubuntu1_amd64.deb ...
Unpacking libxcb-ewmh2:amd64 (0.4.1-1ubuntu1) ...
Selecting previously unselected package rofi.
Preparing to unpack .../rofi_1.5.0-1_amd64.deb ...
Unpacking rofi (1.5.0-1) ...
Setting up libxcb-ewmh2:amd64 (0.4.1-1ubuntu1) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
Setting up rofi (1.5.0-1) ...
Processing triggers for libc-bin (2.27-3ubuntu1) ...
#+end_example
*** Configuration
:PROPERTIES:
:ID:       71374108-706d-4914-af6b-c4c7052b6ecf
:END:

Visual settings for Rofi. Sets up the colour theme (solarized for now, need to
figure out something spacemacs-dark complimentary later), and also sets the font
and separator styles.
#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
! -- ROFI Color theme -- !
rofi.color-enabled: true
rofi.color-window: #002b37, #002b37, #003642
rofi.color-normal: #002b37, #819396, #002b37, #003642, #819396
rofi.color-active: #002b37, #008ed4, #002b37, #003642, #008ed4
rofi.color-urgent: #002b37, #da4281, #002b37, #003642, #da4281

rofi.separator-style:                solid
rofi.font: Iosevka Nerd Font 10
rofi.combi_hide_mode_prefix: TRUE
#+end_src

#+begin_src shell :tangle "~/.Xresources" :mkdirp yes
rofi.case-sensitive: false
#+end_src

**** Rofi-Pass

My configuration for ~rofi-pass~ is written to =/home/sam/.config/rofi-pass/config=
#+begin_src shell :tangle "~/.config/rofi-pass/config" :mkdirp yes
URL_field='url'
USERNAME_field='user'
AUTOTYPE_field='autotype'
EDITOR='ec'
auto_enter='true'
default_user='srpillsworth@gmail.com'
#+end_src

These are the default keybindings for rofi-pass. I haven't changed anything, I'm
just including them here for easy reference
#+begin_src shell :tangle "~/.config/rofi-pass/config" :mkdirp yes
# Custom Keybindings
autotype="Alt+1"
type_user="Alt+2"
type_pass="Alt+3"
open_url="Alt+4"
copy_name="Alt+u"
copy_url="Alt+l"
copy_pass="Alt+p"
show="Alt+o"
copy_entry="Alt+2"
type_entry="Alt+1"
copy_menu="Alt+c"
action_menu="Alt+a"
type_menu="Alt+t"
help="Alt+h"
switch="Alt+x"
insert_pass="Alt+n"
#+end_src

** applications
*** org-protocol
:PROPERTIES:
:ID:       c8cd3185-fb80-421c-a89e-72f63080d040
:END:

Some setup is needed to get [[https://orgmode.org/worg/org-contrib/org-protocol.html#org4166fc4][org-protocol]] working nicely in linux. Org-protocol
can intercept calls from emacsclient to trigger custom actions. We need to tell
linux that org-protocol is an available protocol handler.

#+begin_src shell :tangle "~/.local/share/applications/org-protocol.desktop" :mkdirp yes
[Desktop Entry]
Name=org-protocol
Exec=/usr/bin/emacsclient -n %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+end_src

Update the desktop database:
#+begin_src shell :dir "/sudo::" :results output
sudo update-desktop-database /home/sam/.local/share/applications
#+end_src

#+RESULTS:

~Org-protocol-capture-html~ captures webpages to a nice org heading by converting
to pandoc first.

Download the org-protocol capture script.
#+begin_src shell :results output
wget --output-document="/home/sam/.local/bin/org-protocol-capture-html.sh" https://raw.githubusercontent.com/alphapapa/org-protocol-capture-html/master/org-protocol-capture-html.sh
chmod +x /home/sam/.local/bin/org-protocol-capture-html.sh
#+end_src

#+RESULTS:

Finally we need a way to trigger capture from qutebrowser. I am using a [[https://www.reddit.com/r/emacs/comments/9ze1ln/capture_orgmode_bookmarks_from_qutebrowser_with/ea98mm2][script I
found on reddit]].
#+begin_src shell :tangle "~/.qutebrowser/userscripts/org-capture" :tangle-mode (identity #o755) :mkdirp yes
#!/usr/bin/env bash

readonly CAPTURE_SCRIPT=~/.local/bin/org-protocol-capture-html.sh

# if we start with hints, delete title and selected text and use capture
if [[ "$QUTE_MODE" = "hints" ]]; then
    QUTE_TITLE=""
    QUTE_SELECTED_TEXT=""
fi

# we try to pass as many information as we have
if [[ -n "$QUTE_SELECTED_TEXT" ]]; then
    $CAPTURE_SCRIPT --heading "${QUTE_TITLE}" --url "${QUTE_URL}" "${QUTE_SELECTED_TEXT}"

elif [[ -n "$QUTE_TITLE" ]]; then
    $CAPTURE_SCRIPT --heading "${QUTE_TITLE}" --readability --url "${QUTE_URL}"

elif [[ -n "$QUTE_URL" ]]; then
    $CAPTURE_SCRIPT --readability --url "${QUTE_URL}"

fi
#+end_src

* Plans
** DONE better lock screen
CLOSED: [2019-02-09 Sat 10:56]
- State "DONE"       from "TODO"       [2019-02-09 Sat 10:56]
** DONE still getting some unknown characters in terminal
CLOSED: [2019-02-16 Sat 14:33]
- State "DONE"       from "TODO"       [2019-02-16 Sat 14:33]
** DONE window management
CLOSED: [2019-02-09 Sat 10:56]
- State "DONE"       from "TODO"       [2019-02-09 Sat 10:56]
- try using i3
** TODO i3 gaps
** TODO polybar
** CANCELLED weechat + weeslack + weemacs
CLOSED: [2019-03-14 Thu 18:23]
- State "CANCELLED"  from "TODO"       [2019-03-14 Thu 18:23] \\
  emacs slack package works better, and probably will just use erc for irc channels/gitter
